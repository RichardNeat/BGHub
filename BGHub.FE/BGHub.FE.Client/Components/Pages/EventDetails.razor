@page "/events/{Id:int}"
@using BGHub.FE.Client.Components.GamesComponents
@using BGHub.Models
@using Utils

@rendermode InteractiveAuto

@if (IsLoading)
{
    <p>Loading event details...</p>
}
else if (IsError)
{
    <p>Error fetching events. Please refresh and try again.</p>
}
else
{
    <div class="card mb-4">
        <div class="card-header bg-dark text-white">
            <h5>@Event.Name</h5>
        </div>
        <div class="card-body">
            <p class="card-text">
                <strong>Start Date:</strong> @Event.StartDate.ToString("MMMM dd, yyyy") <br />
                <strong>End Date:</strong> @Event.EndDate.ToString("MMMM dd, yyyy")
            </p>
            <p>
                <strong>Status:</strong>
                @if (Event.StartDate > DateTime.Now)
                {
                    <span class="badge bg-success">Upcoming</span>
                }
                else
                {
                    <span class="badge bg-secondary">Past Event</span>
                }
            </p>
            <p>
                <strong>Location: </strong> 
                @if (Event.LocationLink != null)
                {
                    <a href="@Event.LocationLink" target="_blank">Airbnb</a>
                }
                else
                {
                    <span>No Venue Yet</span>
                }
            </p>
        </div>
        <div class="card-footer">
            <BringGameForm EventInventory="Event.Inventory" HandleGameAdded="HandleGameAdded"/>
            <GamesList EventGames="Event.Inventory" HandleGameDeleted="HandleGameDeleted"/>
        </div>
    </div>

}


@code {
    [Parameter] public int Id { get; set; }
    public bool IsLoading { get; set; } = true;
    public bool IsError { get; set; } = false;

    public HttpClient client { get; set; } = new HttpClient();

    public Event Event { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await client.GetFromJsonAsync<Event>($"{Utils.BASE_API_URL}/Events/{Id}");

        if (result == null)
        {
            IsError = true;
        }
        else
        {
            Event = result;
        }

        IsLoading = false;
    }

    private async Task HandleGameAdded(Game game)
    {
        var eventGameToInsert = new EventGameDTO { EventId = Id, GameId = game.Id};

        var response = await client.PostAsJsonAsync<EventGameDTO>($"{Utils.BASE_API_URL}/EventGames", eventGameToInsert);

        var responseContent = await response.Content.ReadFromJsonAsync<EventGame>();

        Event.Inventory.Insert(0, responseContent);
    }
    private async Task HandleGameDeleted(int id)
    {
        await client.DeleteAsync($"{Utils.BASE_API_URL}/EventGames/{id}");

        var gameToDelete = Event.Inventory.FirstOrDefault(g => g.Id == id);
        Event.Inventory.Remove(gameToDelete);
    }
}
